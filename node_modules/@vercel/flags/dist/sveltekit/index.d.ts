import { RequestEvent, Handle } from '@sveltejs/kit';
import { JsonValue, ApiData } from '../index.js';

type Flag<ReturnValue> = (() => ReturnValue | Promise<ReturnValue>) & {
    key: string;
    description?: string;
    origin?: string;
    options?: {
        value: ReturnValue;
        label?: string;
    }[];
};
/**
 * Declares a feature flag
 */
declare function flag<T>(definition: {
    key: string;
    description?: string;
    origin?: string;
    options?: {
        value: T;
        label?: string;
    }[];
    decide: (event: RequestEvent<Partial<Record<string, string>>, string | null>) => Promise<T> | T;
}): Flag<T>;
declare function getProviderData(flags: Record<string, Flag<JsonValue>>): ApiData;
/**
 * Establishes context for flags, so they have access to the
 * request and cookie.
 *
 * Also registers evaluated flags, except for flags used only after `resolve` calls in other handlers.
 *
 * @example Usage example in src/hooks.server.ts
 *
 * ```ts
 * import { createHandle } from '@vercel/flags/sveltekit';
 * import { FLAGS_SECRET } from '$env/static/private';
 * import * as flags from '$lib/flags';
 *
 * export const handle = createHandle({ secret: FLAGS_SECRET, flags });
 * ```
 *
 * @example Usage example in src/hooks.server.ts with other handlers
 *
 * Note that when composing `createHandle` with `sequence` then `createHandle` should come first. Only handlers after it will be able to access feature flags.
 */
declare function createHandle({ secret, flags, }: {
    secret: string;
    flags?: Record<string, Flag<JsonValue>>;
}): Handle;

export { createHandle, flag, getProviderData };

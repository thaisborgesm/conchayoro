{"version":3,"sources":["../../src/providers/happykit.ts"],"names":[],"mappings":";AAoBA,eAAsB,gBAAgB,SAUZ;AACxB,QAAM,QAAmD,CAAC;AAE1D,MAAI,CAAC,QAAQ,UAAU;AACrB,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAGA,MAAI,MAAM,SAAS;AAAG,WAAO,EAAE,aAAa,CAAC,GAAG,MAAM;AAEtD,QAAM,WAAW,MAAM;AAAA,IACrB,oCAAoC,QAAQ,MAAM;AAAA,IAClD;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,QAAQ,QAAQ;AAAA,MAC3C;AAAA,MACA,OAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI,SAAS,WAAW,KAAK;AAE3B,UAAM,SAAS,YAAY;AAE3B,WAAO;AAAA,MACL,aAAa,CAAC;AAAA,MACd,OAAO;AAAA,QACL;AAAA,UACE,KAAK;AAAA,UACL,MAAM,sCAAsC,SAAS,MAAM;AAAA,QAC7D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,QAAM,OAAQ,MAAM,SAAS,KAAK;AAElC,QAAM,MAAM,QAAQ,OAAO,WAAW,wBAAwB,IAC1D,gBACA,QAAQ,OAAO,WAAW,oBAAoB,IAC5C,YACA;AAEN,QAAM,cAAc,KAAK,MAAM;AAAA,IAC7B,CAAC,KAAK,SAAS;AACb,UAAI,KAAK,IAAI,IAAI;AAAA,QACf,QAAQ,wBAAwB,KAAK,MAAM,IAAI,IAAI,KAAK,QAAQ,IAAI,SAAS,GAAG,IAAI,KAAK,IAAI;AAAA,QAC7F,aAAa,KAAK;AAAA,QAClB,SAAS,KAAK,SAAS,IAAI,CAAC,aAAa;AAAA,UACvC,OAAO,QAAQ;AAAA,UACf,OAAO,QAAQ;AAAA,QACjB,EAAE;AAAA,MACJ;AACA,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SAAO,EAAE,aAAa,MAAM;AAC9B","sourcesContent":["import type { FlagDefinitionType, JsonValue } from '..';\nimport { ProviderData } from './types';\n\ninterface ProjectResponseBody {\n  project: {\n    slug: string;\n  };\n  owner: {\n    slug: string;\n  };\n  flags: {\n    slug: string;\n    description: string;\n    variants: {\n      name: string;\n      value: JsonValue;\n    }[];\n  }[];\n}\n\nexport async function getHappyKitData(options: {\n  /**\n   * The private API Token used to load your feature flags from HappyKit's API.\n   */\n  apiToken: string;\n  /**\n   * The public environment key used to identify your project and environment.\n   * @example flags_pub_development_272357356657967622\n   */\n  envKey: string;\n}): Promise<ProviderData> {\n  const hints: Exclude<ProviderData['hints'], undefined> = [];\n\n  if (!options.apiToken) {\n    hints.push({\n      key: 'happykit/missing-api-token',\n      text: 'Missing HappyKit API Token',\n    });\n  }\n\n  if (!options.envKey) {\n    hints.push({\n      key: 'happykit/missing-env-key',\n      text: 'Missing HappyKit Environment Key',\n    });\n  }\n\n  // Abort early if called with incomplete options.\n  if (hints.length > 0) return { definitions: {}, hints };\n\n  const response = await fetch(\n    `https://happykit.dev/api/project/${options.envKey}`,\n    {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${options.apiToken}`,\n      },\n      cache: 'no-store',\n    },\n  );\n\n  if (response.status !== 200) {\n    // Consume the response body to free up connections.\n    await response.arrayBuffer();\n\n    return {\n      definitions: {},\n      hints: [\n        {\n          key: 'happykit/response-not-ok',\n          text: `Failed to fetch HappyKit (Received ${response.status} response)`,\n        },\n      ],\n    };\n  }\n\n  const body = (await response.json()) as ProjectResponseBody;\n\n  const env = options.envKey.startsWith('flags_pub_development_')\n    ? 'development'\n    : options.envKey.startsWith('flags_pub_preview_')\n      ? 'preview'\n      : 'production';\n\n  const definitions = body.flags.reduce<Record<string, FlagDefinitionType>>(\n    (acc, flag) => {\n      acc[flag.slug] = {\n        origin: `https://happykit.dev/${body.owner.slug}/${body.project.slug}/flag/${env}/${flag.slug}`,\n        description: flag.description,\n        options: flag.variants.map((variant) => ({\n          value: variant.value,\n          label: variant.name,\n        })),\n      };\n      return acc;\n    },\n    {},\n  );\n\n  return { definitions, hints };\n}\n"]}
{"version":3,"sources":["../../src/providers/split.ts"],"sourcesContent":["import { ProviderData } from './types';\n\ninterface ListFeatureFlagsResponseBody {\n  objects: {\n    id: string;\n    name: string;\n    trafficType: Record<string, unknown>;\n    creationTime: number;\n    treatments: {\n      name: string;\n      description: string;\n    }[];\n  }[];\n  offset: number;\n  limit: number;\n  totalCount: number;\n}\n\nexport async function getSplitData(options: {\n  adminApiKey: string;\n  workspaceId: string;\n  organizationId: string;\n  environmentId: string;\n}): Promise<ProviderData> {\n  const hints: Exclude<ProviderData['hints'], undefined> = [];\n  const objects: ListFeatureFlagsResponseBody['objects'] = [];\n\n  if (!options.adminApiKey) {\n    hints.push({\n      key: 'split/missing-api-key',\n      text: 'Missing Split Admin API Key',\n    });\n  }\n\n  if (!options.workspaceId) {\n    hints.push({\n      key: 'split/missing-workspace-id',\n      text: 'Missing Split Workspace Id',\n    });\n  }\n\n  if (!options.organizationId) {\n    hints.push({\n      key: 'split/missing-organization-id',\n      text: 'Missing Split Organization Id',\n    });\n  }\n\n  if (!options.environmentId) {\n    hints.push({\n      key: 'split/missing-environment-id',\n      text: 'Missing Split Environment Id',\n    });\n  }\n\n  // Abort early if called with incomplete options.\n  if (hints.length > 0) return { definitions: {}, hints };\n\n  let initialTotalCount = -1;\n\n  while (true) {\n    const response = await fetch(\n      `https://api.split.io/internal/api/v2/splits/ws/${options.workspaceId}/environments/${options.environmentId}?limit=50&offset=${objects.length}`,\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          Authorization: `Bearer ${options.adminApiKey}`,\n        },\n        cache: 'no-store',\n      },\n    );\n\n    if (response.status !== 200) {\n      // Consume the response body to free up connections.\n      await response.arrayBuffer();\n\n      return {\n        definitions: {},\n        hints: [\n          {\n            key: 'split/response-not-ok',\n            text: `Failed to fetch Split (Received ${response.status} response)`,\n          },\n        ],\n      };\n    }\n\n    const body = (await response.json()) as ListFeatureFlagsResponseBody;\n    objects.push(...body.objects);\n\n    // Only consider the first `totalCount` to prevent issues with flags\n    // being created during the fetching process.\n    if (initialTotalCount === -1) {\n      initialTotalCount = body.totalCount;\n    }\n\n    if (objects.length >= initialTotalCount || body.objects.length === 0) {\n      break;\n    }\n  }\n\n  const definitions = objects.reduce<ProviderData['definitions']>(\n    (acc, item) => {\n      acc[item.name] = {\n        // TODO: We'd need to fetch each feature flag separately to get the description, do we want that?\n        // description: item.description,\n        // Note that the name is the value itself\n        options: item.treatments.map(({ name }) => ({ value: name })),\n        origin: `https://app.split.io/org/${options.organizationId}/ws/${options.workspaceId}/splits/${item.id}/env/${options.environmentId}/definition`,\n      };\n      return acc;\n    },\n    {},\n  );\n\n  return { definitions, hints };\n}\n"],"mappings":";AAkBA,eAAsB,aAAa,SAKT;AACxB,QAAM,QAAmD,CAAC;AAC1D,QAAM,UAAmD,CAAC;AAE1D,MAAI,CAAC,QAAQ,aAAa;AACxB,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,CAAC,QAAQ,aAAa;AACxB,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,CAAC,QAAQ,gBAAgB;AAC3B,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,CAAC,QAAQ,eAAe;AAC1B,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAGA,MAAI,MAAM,SAAS;AAAG,WAAO,EAAE,aAAa,CAAC,GAAG,MAAM;AAEtD,MAAI,oBAAoB;AAExB,SAAO,MAAM;AACX,UAAM,WAAW,MAAM;AAAA,MACrB,kDAAkD,QAAQ,WAAW,iBAAiB,QAAQ,aAAa,oBAAoB,QAAQ,MAAM;AAAA,MAC7I;AAAA,QACE,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,eAAe,UAAU,QAAQ,WAAW;AAAA,QAC9C;AAAA,QACA,OAAO;AAAA,MACT;AAAA,IACF;AAEA,QAAI,SAAS,WAAW,KAAK;AAE3B,YAAM,SAAS,YAAY;AAE3B,aAAO;AAAA,QACL,aAAa,CAAC;AAAA,QACd,OAAO;AAAA,UACL;AAAA,YACE,KAAK;AAAA,YACL,MAAM,mCAAmC,SAAS,MAAM;AAAA,UAC1D;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,UAAM,OAAQ,MAAM,SAAS,KAAK;AAClC,YAAQ,KAAK,GAAG,KAAK,OAAO;AAI5B,QAAI,sBAAsB,IAAI;AAC5B,0BAAoB,KAAK;AAAA,IAC3B;AAEA,QAAI,QAAQ,UAAU,qBAAqB,KAAK,QAAQ,WAAW,GAAG;AACpE;AAAA,IACF;AAAA,EACF;AAEA,QAAM,cAAc,QAAQ;AAAA,IAC1B,CAAC,KAAK,SAAS;AACb,UAAI,KAAK,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA,QAIf,SAAS,KAAK,WAAW,IAAI,CAAC,EAAE,KAAK,OAAO,EAAE,OAAO,KAAK,EAAE;AAAA,QAC5D,QAAQ,4BAA4B,QAAQ,cAAc,OAAO,QAAQ,WAAW,WAAW,KAAK,EAAE,QAAQ,QAAQ,aAAa;AAAA,MACrI;AACA,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SAAO,EAAE,aAAa,MAAM;AAC9B;","names":[]}
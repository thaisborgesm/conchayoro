// src/providers/optimizely.ts
async function getOptimizelyData(options) {
  const hints = [];
  const items = [];
  if (!options.apiKey) {
    hints.push({
      key: "optimizely/missing-api-key",
      text: "Missing Optimizely Admin API Key"
    });
  }
  if (!options.projectId) {
    hints.push({
      key: "optimizely/missing-project-id",
      text: "Missing Optimizely Project Id"
    });
  }
  if (hints.length > 0)
    return { definitions: {}, hints };
  let suffix = `/projects/${options.projectId}/flags`;
  do {
    const response = await fetch(
      `https://api.optimizely.com/flags/v1${suffix}`,
      {
        method: "GET",
        headers: {
          "content-type": "application/json",
          Authorization: `Bearer ${options.apiKey}`
        },
        cache: "no-store"
      }
    );
    if (response.status !== 200) {
      await response.arrayBuffer();
      return {
        definitions: {},
        hints: [
          {
            key: "optimizely/response-not-ok",
            text: `Failed to fetch Optimizely (Received ${response.status} response)`
          }
        ]
      };
    }
    const body = await response.json();
    for await (const flag of body.items) {
      const variations = await getVariationsForFlag({
        apiKey: options.apiKey,
        projectId: options.projectId,
        flagKey: flag.key
      });
      if (variations instanceof Error) {
        return {
          definitions: {},
          hints: [
            {
              key: "optimizely/response-not-ok",
              text: variations.message
            }
          ]
        };
      }
      items.push({
        ...flag,
        variations
      });
    }
    suffix = body.next_url?.[0];
  } while (suffix);
  const definitions = items.reduce((acc, item) => {
    acc[item.name] = {
      description: item.description,
      options: item.variations.map((variation) => {
        return {
          label: variation.name,
          value: {
            variationKey: variation.key,
            enabled: true,
            flagKey: item.key,
            variables: transformVariables(variation.variables)
          }
        };
      }),
      origin: `https://app.optimizely.com/v2/projects/${options.projectId}/flags/manage/${item.key}/rules/production`
    };
    return acc;
  }, {});
  return { definitions, hints };
}
async function getVariationsForFlag(options) {
  const items = [];
  let suffix = `/projects/${options.projectId}/flags/${options.flagKey}/variations`;
  do {
    const response = await fetch(
      `https://api.optimizely.com/flags/v1${suffix}`,
      {
        method: "GET",
        headers: {
          "content-type": "application/json",
          Authorization: `Bearer ${options.apiKey}`
        },
        cache: "no-store"
      }
    );
    if (response.status !== 200) {
      return new Error(
        `Failed to fetch Optimizely (Received ${response.status} response)`
      );
    }
    const body = await response.json();
    suffix = body.next_url?.[0];
    items.push(...body.items);
  } while (suffix);
  return items;
}
function transformVariables(variables) {
  return Object.keys(variables).reduce(
    (acc, nextKey) => {
      const variable = variables[nextKey];
      switch (variable.type) {
        case "string":
          acc[nextKey] = variable.value;
          break;
        case "integer":
        case "double":
          acc[nextKey] = Number(variable.value);
          break;
        case "boolean":
          acc[nextKey] = variable.value === "true";
          break;
        case "json":
          acc[nextKey] = JSON.parse(variable.value);
          break;
        default:
          throw new Error(
            `Unexpected variable type: ${variable.type} for variable ${variable.key}`
          );
      }
      return acc;
    },
    {}
  );
}
export {
  getOptimizelyData
};
//# sourceMappingURL=optimizely.js.map
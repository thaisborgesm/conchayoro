{"version":3,"sources":["../../src/providers/optimizely.ts"],"names":[],"mappings":"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","sourcesContent":["import type { JsonValue } from '..';\nimport type { ProviderData } from './types';\n\ninterface OptimizelyFeatureFlagsResponseBody {\n  items: {\n    key: string;\n    name: string;\n    description: string;\n    variable_definitions: Record<\n      string,\n      {\n        key: string;\n        description: string;\n        type: string;\n        default_value: string;\n      }\n    >;\n  }[];\n  next_url?: [string];\n}\n\ninterface OptimizelyVariationsResponseBody {\n  items: {\n    key: string;\n    name: string;\n    description: string;\n    variables: Record<\n      string,\n      {\n        key: string;\n        type: string;\n        value: string;\n        is_default: boolean;\n      }\n    >;\n  }[];\n  next_url?: [string];\n}\n\nexport async function getOptimizelyData(options: {\n  projectId: string;\n  apiKey: string;\n}): Promise<ProviderData> {\n  const hints: Exclude<ProviderData['hints'], undefined> = [];\n  const items: {\n    key: string;\n    name: string;\n    description: string;\n    variations: OptimizelyVariationsResponseBody['items'];\n  }[] = [];\n\n  if (!options.apiKey) {\n    hints.push({\n      key: 'optimizely/missing-api-key',\n      text: 'Missing Optimizely Admin API Key',\n    });\n  }\n\n  if (!options.projectId) {\n    hints.push({\n      key: 'optimizely/missing-project-id',\n      text: 'Missing Optimizely Project Id',\n    });\n  }\n\n  // Abort early if called with incomplete options.\n  if (hints.length > 0) return { definitions: {}, hints };\n\n  let suffix: undefined | string = `/projects/${options.projectId}/flags`;\n\n  do {\n    const response = await fetch(\n      `https://api.optimizely.com/flags/v1${suffix}`,\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          Authorization: `Bearer ${options.apiKey}`,\n        },\n        cache: 'no-store',\n      },\n    );\n\n    if (response.status !== 200) {\n      // Consume the response body to free up connections.\n      await response.arrayBuffer();\n\n      return {\n        definitions: {},\n        hints: [\n          {\n            key: 'optimizely/response-not-ok',\n            text: `Failed to fetch Optimizely (Received ${response.status} response)`,\n          },\n        ],\n      };\n    }\n\n    const body = (await response.json()) as OptimizelyFeatureFlagsResponseBody;\n\n    for await (const flag of body.items) {\n      const variations = await getVariationsForFlag({\n        apiKey: options.apiKey,\n        projectId: options.projectId,\n        flagKey: flag.key,\n      });\n\n      if (variations instanceof Error) {\n        return {\n          definitions: {},\n          hints: [\n            {\n              key: 'optimizely/response-not-ok',\n              text: variations.message,\n            },\n          ],\n        };\n      }\n\n      items.push({\n        ...flag,\n        variations,\n      });\n    }\n\n    suffix = body.next_url?.[0];\n  } while (suffix);\n\n  const definitions = items.reduce<ProviderData['definitions']>((acc, item) => {\n    acc[item.name] = {\n      description: item.description,\n      options: item.variations.map((variation) => {\n        return {\n          label: variation.name,\n          value: {\n            variationKey: variation.key,\n            enabled: true,\n            flagKey: item.key,\n            variables: transformVariables(variation.variables),\n          },\n        };\n      }),\n      origin: `https://app.optimizely.com/v2/projects/${options.projectId}/flags/manage/${item.key}/rules/production`,\n    };\n    return acc;\n  }, {});\n\n  return { definitions, hints };\n}\n\n/**\n * Fetch all variations\n */\nasync function getVariationsForFlag(options: {\n  projectId: string;\n  apiKey: string;\n  flagKey: string;\n}) {\n  const items: OptimizelyVariationsResponseBody['items'] = [];\n\n  let suffix: undefined | string =\n    `/projects/${options.projectId}/flags/${options.flagKey}/variations`;\n\n  do {\n    const response = await fetch(\n      `https://api.optimizely.com/flags/v1${suffix}`,\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          Authorization: `Bearer ${options.apiKey}`,\n        },\n        cache: 'no-store',\n      },\n    );\n\n    if (response.status !== 200) {\n      return new Error(\n        `Failed to fetch Optimizely (Received ${response.status} response)`,\n      );\n    }\n\n    const body = (await response.json()) as OptimizelyVariationsResponseBody;\n    suffix = body.next_url?.[0];\n\n    items.push(...body.items);\n  } while (suffix);\n\n  return items;\n}\n\n/**\n * Transform the raw `variables` to JSON.\n */\nfunction transformVariables(\n  variables: OptimizelyVariationsResponseBody['items'][number]['variables'],\n) {\n  return Object.keys(variables).reduce(\n    (acc, nextKey) => {\n      const variable = variables[nextKey]!;\n\n      switch (variable.type) {\n        case 'string':\n          acc[nextKey] = variable.value;\n          break;\n        case 'integer':\n        case 'double':\n          acc[nextKey] = Number(variable.value);\n          break;\n        case 'boolean':\n          acc[nextKey] = variable.value === 'true';\n          break;\n        case 'json':\n          acc[nextKey] = JSON.parse(variable.value);\n          break;\n        default:\n          throw new Error(\n            `Unexpected variable type: ${variable.type} for variable ${variable.key}`,\n          );\n      }\n\n      return acc;\n    },\n    {} as Record<string, JsonValue>,\n  );\n}\n"]}
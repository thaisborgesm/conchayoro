{"version":3,"sources":["../../src/providers/launchdarkly.ts"],"names":[],"mappings":";AAeA,eAAsB,oBAAoB,SAIhB;AACxB,QAAM,QAAmD,CAAC;AAE1D,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,CAAC,QAAQ,aAAa;AACxB,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,CAAC,QAAQ,YAAY;AACvB,UAAM,KAAK;AAAA,MACT,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,MAAM,SAAS,GAAG;AACpB,WAAO,EAAE,aAAa,CAAC,GAAG,MAAM;AAAA,EAClC;AAEA,QAAM,UAAU;AAAA,IACd,eAAe,QAAQ;AAAA,IACvB,kBAAkB;AAAA,EACpB;AAEA,QAAM,MAAM,MAAM;AAAA,IAChB,6CAA6C,QAAQ,UAAU;AAAA,IAC/D,EAAE,QAAQ,OAAO,SAAS,OAAO,WAAW;AAAA,EAC9C;AAEA,MAAI,IAAI,WAAW,KAAK;AACtB,WAAO;AAAA,MACL,aAAa,CAAC;AAAA,MACd,OAAO;AAAA,QACL;AAAA,UACE,KAAK,gCAAgC,QAAQ,UAAU;AAAA,UACvD,MAAM,0CAA0C,IAAI,MAAM;AAAA,QAC5D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI;AACF,UAAM,OAAQ,MAAM,IAAI,KAAK;AAC7B,UAAM,QAAsC,CAAC,GAAG,KAAK,KAAK;AAG1D,aAAS,SAAS,KAAK,SAAS,KAAK,YAAY,UAAU,KAAK;AAC9D,YAAM,eAAe,MAAM;AAAA,QACzB,6CAA6C,QAAQ,UAAU,WAAW,MAAM;AAAA,QAChF,EAAE,QAAQ,OAAO,SAAS,OAAO,WAAW;AAAA,MAC9C;AAEA,UAAI,aAAa,WAAW,KAAK;AAC/B,cAAM,gBACH,MAAM,aAAa,KAAK;AAC3B,cAAM,KAAK,GAAG,cAAc,KAAK;AAAA,MACnC,OAAO;AACL,cAAM,KAAK;AAAA,UACT,KAAK,gCAAgC,QAAQ,UAAU,IAAI,MAAM;AAAA,UACjE,MAAM,0CAA0C,aAAa,MAAM;AAAA,QACrE,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO;AAAA,MACL,aAAa,MAAM,OAA4B,CAAC,KAAK,SAAS;AAC5D,YAAI,KAAK,GAAG,IAAI;AAAA;AAAA,UAEd,QAAQ,gCAAgC,QAAQ,UAAU,IAAI,QAAQ,WAAW,aAAa,KAAK,GAAG;AAAA,UACtG,aAAa,KAAK;AAAA,UAClB,SAAS,KAAK,WAAW,IAAI,CAAC,eAAe;AAAA,YAC3C,OAAO,UAAU;AAAA,YACjB,OAAO,UAAU;AAAA,UACnB,EAAE;AAAA,QACJ;AACA,eAAO;AAAA,MACT,GAAG,CAAC,CAAC;AAAA,MACL;AAAA,IACF;AAAA,EACF,SAAS,GAAG;AACV,WAAO;AAAA,MACL,aAAa,CAAC;AAAA,MACd,OAAO;AAAA,QACL;AAAA,UACE,KAAK,gCAAgC,QAAQ,UAAU;AAAA,UACvD,MAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF","sourcesContent":["import { type FlagDefinitionsType, type JsonValue } from '..';\nimport { ProviderData } from './types';\n\ninterface LaunchDarklyApiData {\n  items: {\n    key: string;\n    variations: { value: JsonValue; name?: string }[];\n    description: string;\n    defaults: {\n      offVariation: number;\n    };\n  }[];\n  totalCount: number;\n}\n\nexport async function getLaunchDarklyData(options: {\n  apiKey: string;\n  environment: string;\n  projectKey: string;\n}): Promise<ProviderData> {\n  const hints: Exclude<ProviderData['hints'], undefined> = [];\n\n  if (!options.apiKey) {\n    hints.push({\n      key: 'launchdarkly/missing-api-key',\n      text: 'Missing LaunchDarkly API Key',\n    });\n  }\n\n  if (!options.environment) {\n    hints.push({\n      key: 'launchdarkly/missing-environment',\n      text: 'Missing LaunchDarkly API Key',\n    });\n  }\n\n  if (!options.projectKey) {\n    hints.push({\n      key: 'launchdarkly/missing-environment',\n      text: 'Missing LaunchDarkly Project Key',\n    });\n  }\n\n  if (hints.length > 0) {\n    return { definitions: {}, hints };\n  }\n\n  const headers = {\n    Authorization: options.apiKey,\n    'LD-API-Version': '20240415',\n  };\n\n  const res = await fetch(\n    `https://app.launchdarkly.com/api/v2/flags/${options.projectKey}?offset=0&limit=100&sort=creationDate`,\n    { method: 'GET', headers, cache: 'no-store' },\n  );\n\n  if (res.status !== 200) {\n    return {\n      definitions: {},\n      hints: [\n        {\n          key: `launchdarkly/response-not-ok/${options.projectKey}`,\n          text: `Failed to fetch LaunchDarkly (Received ${res.status} response)`,\n        },\n      ],\n    };\n  }\n\n  try {\n    const data = (await res.json()) as LaunchDarklyApiData;\n    const items: LaunchDarklyApiData['items'] = [...data.items];\n\n    // paginate in a parallel\n    for (let offset = 100; offset < data.totalCount; offset += 100) {\n      const paginatedRes = await fetch(\n        `https://app.launchdarkly.com/api/v2/flags/${options.projectKey}?offset=${offset}&limit=100&sort=creationDate`,\n        { method: 'GET', headers, cache: 'no-store' },\n      );\n\n      if (paginatedRes.status === 200) {\n        const paginatedData =\n          (await paginatedRes.json()) as LaunchDarklyApiData;\n        items.push(...paginatedData.items);\n      } else {\n        hints.push({\n          key: `launchdarkly/response-not-ok/${options.projectKey}-${offset}`,\n          text: `Failed to fetch LaunchDarkly (Received ${paginatedRes.status} response)`,\n        });\n      }\n    }\n\n    return {\n      definitions: items.reduce<FlagDefinitionsType>((acc, item) => {\n        acc[item.key] = {\n          // defaultValue: item.variations[item.defaults.offVariation].value,\n          origin: `https://app.launchdarkly.com/${options.projectKey}/${options.environment}/features/${item.key}/targeting`,\n          description: item.description,\n          options: item.variations.map((variation) => ({\n            value: variation.value,\n            label: variation.name,\n          })),\n        };\n        return acc;\n      }, {}),\n      hints,\n    };\n  } catch (e) {\n    return {\n      definitions: {},\n      hints: [\n        {\n          key: `launchdarkly/response-not-ok/${options.projectKey}`,\n          text: `Failed to fetch LaunchDarkly`,\n        },\n      ],\n    };\n  }\n}\n"]}
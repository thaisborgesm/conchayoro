{"version":3,"sources":["../../src/providers/hypertune.ts"],"names":[],"mappings":";AAEA,eAAsB,iBAAiB,SAEb;AACxB,MAAI,CAAC,QAAQ,OAAO;AAClB,WAAO;AAAA,MACL,aAAa,CAAC;AAAA,MACd,OAAO;AAAA,QACL,EAAE,KAAK,2BAA2B,MAAM,0BAA0B;AAAA,MACpE;AAAA,IACF;AAAA,EACF;AAEA,QAAM,WAAW,MAAM;AAAA,IACrB;AAAA,IACA;AAAA,MACE,SAAS,EAAE,eAAe,UAAU,QAAQ,KAAK,GAAG;AAAA,MACpD,OAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI,SAAS,WAAW,KAAK;AAC3B,WAAO;AAAA,MACL,aAAa,CAAC;AAAA,MACd,OAAO;AAAA,QACL;AAAA,UACE,KAAK;AAAA,UACL,MAAM,wDAAwD,SAAS,MAAM;AAAA,QAC/E;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,QAAM,cAA2C,MAAM,SAAS,KAAK;AACrE,SAAO,EAAE,aAAa,OAAO,CAAC,EAAE;AAClC","sourcesContent":["import type { ProviderData } from './types';\n\nexport async function getHypertuneData(options: {\n  token: string;\n}): Promise<ProviderData> {\n  if (!options.token) {\n    return {\n      definitions: {},\n      hints: [\n        { key: 'hypertune/missing-token', text: 'Missing Hypertune token' },\n      ],\n    };\n  }\n\n  const response = await fetch(\n    `https://edge.hypertune.com/vercel-flag-definitions`,\n    {\n      headers: { Authorization: `Bearer ${options.token}` },\n      cache: 'no-store',\n    },\n  );\n\n  if (response.status !== 200) {\n    return {\n      definitions: {},\n      hints: [\n        {\n          key: 'hypertune/response-not-ok',\n          text: `Failed to fetch Hypertune flag definitions (received ${response.status} response)`,\n        },\n      ],\n    };\n  }\n\n  const definitions: ProviderData['definitions'] = await response.json();\n  return { definitions, hints: [] };\n}\n"]}